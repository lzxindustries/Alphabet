version: 2.1
orbs:
  win: circleci/windows@2.2.0

workflows:
  main:
    jobs:
      - build-linux:
          context:
            - org-global
      - build-windows:
          context:
            - org-global
      - build-macos:
          context:
            - org-global
      - publish-github-release:
          requires:
            - build-linux
            - build-windows
            - build-macos
          # filters:
          #   branches:
          #     ignore: /.*/
          #   tags:
          #     only: /^\d+\.\d+\.\d+$/            
            
jobs:
  publish-github-release:
      docker:
        - image: circleci/golang:latest
      steps:
        - attach_workspace:
            at: ./artifacts
        - run:
            name: "Publish Release on GitHub"
            command: |
              go get github.com/tcnksm/ghr
              VERSION=$(lzxtempl-desktop-app --version)
              ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/
  build-macos:
    macos:
      xcode: 11.6.0
    steps:
      - checkout
      - run: 
          name: "Install Dependencies"
          command: |
            xcodebuild -version
            brew install p7zip
            brew install python
            brew install cmake
            python3 -m pip install aqtinstall
            (cd /usr/local/opt; aqt install 5.14.2 mac desktop clang_64)
      - run: 
          name: "Build"
          command: |
            cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DQt5_DIR=/usr/local/opt/5.14.2/clang_64/lib/cmake/Qt5/ .
            cmake --build .
            cmake --build . --target bundle
            

  build-windows:
    executor: win/default
    steps:
      - checkout
      - run: 
          name: "Install Dependencies"
          command: |
            $WebClient = New-Object System.Net.WebClient
            $WebClient.DownloadFile("https://aka.ms/vs/16/release/vs_community.exe","C:\vs_community.exe")
            $sourceNugetExe = "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
            $targetNugetExe = "$rootPath\nuget.exe"
            Invoke-WebRequest $sourceNugetExe -OutFile $targetNugetExe
            Set-Alias nuget $targetNugetExe -Scope Global -Verbose
            C:\vs_community.exe --add Microsoft.VisualStudio.Workload.NetWeb --quiet --wait --norestart --noUpdateInstaller
            cinst --no-progress -y 7zip
            pip install cmake
            pip install aqtinstall
            python -m aqt install 5.14.2 windows desktop win64_msvc2017_64
            Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
      - run:
          name: "Update Submodules"
          command: |
            git submodule update --init --recursive --merge .
      - run:
          name: "Build & Package Project"
          command: |
            mkdir build
            cd build
            cmake -G "Visual Studio 16 2019" -A x64 -DQt5_DIR=C:\Users\circleci\project\5.14.2\msvc2017_64\lib\cmake\Qt5 ..
            cmake --build . --config Release
            cmake --build . --target bundle --config Release

      - store_artifacts:
          path: C:\Users\circleci\project\build

  build-linux:
    docker:
      - image: creatorlars/lzxembedded-base:V0.1
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - run:
          name: "Update Build Environment"
          command: |
            apt-get -q update
            apt-get install -y -q cmake ninja-build make g++ rpm p7zip-full
      - run:
          name: "Install Dependencies"
          command: |
            apt-get install -y -q qtbase5-dev qt5-style-plugins
            wget -q -O linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/7/linuxdeployqt-7-x86_64.AppImage
            install linuxdeployqt /usr/local/bin/
      - run:
          name: "Update Submodules"
          command: |
            git submodule update --init --recursive --merge .
      - run:
          name: "Build & Package Project"
          command: |
            mkdir build
            cd build
            cmake ..
            cmake --build . --target bundle

      - store_artifacts:
          path: /root/project/build
          
